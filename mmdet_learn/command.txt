mmdetection掌握训练技巧
1.单,多尺度训练
2.单,多尺度测试

模型迁移代码
模型迁移的作用，快速验证在mmdetection上复现的算法推理是否一致

mmdet
1.训练集可视化命令
--output-dir 后边跟保存可视化文件的目录
--not-show 表示直接存储不展示
python tools/misc/browse_dataset.py configs/xxx/xxx.py --output-dir ./visivle/ --not-show

2.可视化单张图片的测试结果(默认是展示大于0.3 score)
python demo/image_demo.py demo/xxx.jpg configs/xxx/xxx.py check/xxx.pth

3.评估模型
--eval bbox 表示评估coco指标
--eval mAP 表示评估voc指标
classwise=True 表示展示每个类的AP值
python tools/test.py configs/xxx/xxx.py check/xxx.pth --eval bbox --eval-options classwise=True

4.将voc格式的数据集转化为coco格式的数据集
python tools/dataset_converters/pascal_voc.py data/VOCdevkit -o data/voctococo --out-format coco

5.将mosaic与mixup数据增强保存为coco格式的数据集用于做实验(这部分代码在公司generalizeddetection里)
python tools/misc/save_mosaic.py configs/shiyan/yolox_l_8x8_300e_coco.py --output-dir data/coco/mosaic --not-show

6.将推理结果保存为json文件,用于之后的分析
python tools/test.py configs/xxxx.py check/xxxx.pth --format-only --options "jsonfile_prefix=./soft-teacher-bbox-results"

7.用于分析物体检测质量的工具
python tools/analysis_tools/coco_error_analysis.py ../../detections_val2017_mh.json save_ana_results --ann=../../data/coco/annotations/instances_val2017.json

Linux 
1.后台运行命令(梧州集群)
nohup bash tools/dist_train.sh configs/xxx/xxx.py 8 --seed xxx > runoob.log 2>&1 &

2.将分卷解压
cat 1.z01 1.z02 1.zip > combined.zip && unzip -FF combined.zip

Detectron2




fiftyone
导入coco val数据

import fiftyone as fo
import fiftyone.zoo as foz
import fiftyone.utils.coco as fouc

#方式一：从数据库中导入
dataset = foz.load_zoo_dataset(
    "coco-2017",
    split="validation",
    label_types=["detections"]
)

#方式二：从本地导入
dataset = fo.Dataset.from_dir(
    dataset_type=fo.types.COCODetectionDataset,
    data_path=data_path, #数据的路径
    labels_path=labels_path, #标注的路径
    name=name, #数据的名称
)

classes = dataset.distinct("ground_truth.detections.label") #查看类别

# Export images and ground truth labels to disk
# 获取fiftyone修改类别id的json文件
dataset.export(
    export_dir="F:\\coco",  #导出路径
    dataset_type=fo.types.COCODetectionDataset,
    classes=classes,
    label_field="ground_truth",
)

导入预测的json文件
1.采用mmdetection输出预测的json文件
2.将输出的json格式更改为coco的训练json格式
import json
with open("F:\\prediction.json", 'r') as f:
    predictions = json.load(f)
with open("F:\\instances_val2017.json", 'r') as f:
    annotations = json.load(f)

tmp_ana = []
_id = 1
for item in predictions:
    single = {}
    single["id"] = _id
    single["image_id"] = item["image_id"]
    single["category_id"] = item["category_id"]
    single["bbox"] = item["bbox"]
    single["score"] = item["score"]
    #single["area"] = item["bbox"][2] * item["bbox"][3]
    #single["iscrowd"] = 0
    _id += 1
    tmp_ana.append(single)

result = {}
result['info'] = annotations['info']
result['licenses'] = annotations['licenses']
result['images'] = annotations['images']
result['categories'] = annotations['categories']
result['annotations'] = tmp_ana

with open("F:\\fiftyone\\dataset\\coco\\prediction\\soft-teacher.json", "w") as dump_f:
    json.dump(result, dump_f)
    
3.将图片与转换后的json格式导入fiftyone,然后导出,获取fiftyone修改后的json文件

4.导入gt与预测的json文件

fouc.add_coco_labels(
    dataset,
    "predictions",
    predictions["annotations"],
    classes=classes,
)
    
print(dataset.count("ground_truth.detections")) #输出gt的个数
print(dataset.count("predictions.detections")) #输出预测的label个数
    
    
    
